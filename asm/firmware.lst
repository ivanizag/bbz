ca65 V2.18 - Ubuntu 2.18-1
Main file   : asm/firmware.s
Current file: asm/firmware.s

000000r 1               ; build:
000000r 1               ;   cl65 --target none -l asm/firmware.lst asm/firmware.s --config asm/firmware.cfg -o firmware
000000r 1               ; Review constants.go when this code is changed
000000r 1               
000000r 1               
000000r 1               ; constants
000000r 1                               .exportzp ROM_SELECT := $f4
000000r 1                               .export ROM_TABLE := $023a
000000r 1                               .export LANGUAGE_ENTRY := $8000
000000r 1                               .export SERVICE_ENTRY := $8003
000000r 1                               .export ROM_LATCH := $fe30
000000r 1               
000000r 1               
000000r 1               ; boot code
000000r 1                               .org $0000
000000  1  EA           START:          nop
000001  1               
000001  1               
000001  1               ; init ram vectors
000001  1  xx xx xx xx                  .res $0200 - *
000005  1  xx xx xx xx  
000009  1  xx xx xx xx  
000200  1                               .org $0200
000200  1               VECTORS_START:
000200  1  11 FB        USERV:          .addr epUSER
000202  1  10 FB        BRKV:           .addr epBRK
000204  1  0F FB        IRQ1V:          .addr epIRQ1
000206  1  0E FB        IRQ2V:          .addr epIRQ2
000208  1  0D FB        CLIV:           .addr epCLI
00020A  1  0C FB        BYTEV:          .addr epBYTE
00020C  1  0B FB        WORDV:          .addr epWORD
00020E  1  0A FB        WRCHV:          .addr epWRCH
000210  1  09 FB        RDCHV:          .addr epRDCH
000212  1  08 FB        FILEV:          .addr epFILE
000214  1  07 FB        ARGSV:          .addr epARGS
000216  1  06 FB        BGETV:          .addr epBGET
000218  1  05 FB        BPUTV:          .addr epBPUT
00021A  1  04 FB        GBPBV:          .addr epGBPB
00021C  1  03 FB        FINDV:          .addr epFIND
00021E  1  02 FB        FSCV:           .addr epFSC
000220  1  01 FB        EVNTV:          .addr epEVNT
000222  1  00 FB        UPTV:           .addr epUPT
000224  1  17 FB        NETV:           .addr epNET
000226  1  18 FB        VDUV:           .addr epVDU
000228  1  19 FB        KEYV:           .addr epKEY
00022A  1  1A FB        INSV:           .addr epINS
00022C  1  1B FB        REMV:           .addr epREM
00022E  1  1C FB        CNPV:           .addr epCNP
000230  1  1D FB        IND1V:          .addr epIND1
000232  1  1E FB        IND2V:          .addr epIND2
000234  1  1F FB        IND3V:          .addr epIND3
000236  1               
000236  1               ; support code
000236  1  xx xx xx xx                  .res $f000 - *
00023A  1  xx xx xx xx  
00023E  1  xx xx xx xx  
00F000  1                               .org $f000
00F000  1               
00F000  1               ; Send cli command to ROMS and check the result
00F000  1               ; See https://github.com/raybellis/mos120/blob/2e2ff80708e79553643e4b77c947b0652117731b/mos120.s#L10701
00F000  1               ; Expects A=4, X=F, Y=0, the command to be pointed by $f2
00F000  1  AA           CLITOROMS:      tax                     ; Service call number
00F001  1  20 15 F0                     jsr OSBYTE_143
00F004  1  F0 0E                        beq CTR_CLAIMED
00F006  1  00                           brk                     ; "254-Bad command" error
00F007  1  FE                           .byte $fe
00F008  1  42 61 64 20                  .asciiz "Bad command"
00F00C  1  63 6F 6D 6D  
00F010  1  61 6E 64 00  
00F014  1  60           CTR_CLAIMED:    rts
00F015  1               
00F015  1               ;*************************************************************************
00F015  1               ;*
00F015  1               ;*  OSBYTE 143: Pass service commands to sideways ROMs
00F015  1                       ; On entry X=service call number
00F015  1                       ; Y=any additional parameter
00F015  1                       ; On entry X=0 if claimed, or preserved if unclaimed
00F015  1                       ; Y=any returned parameter
00F015  1                       ; When called internally, EQ set if call claimed
00F015  1               ;* See https://github.com/raybellis/mos120/blob/2e2ff80708e79553643e4b77c947b0652117731b/mos120.s#L10683
00F015  1               
00F015  1  A5 F4        OSBYTE_143:     lda ROM_SELECT          ; Get current ROM number
00F017  1  48                           pha                     ; Save it
00F018  1  8A                           txa                     ; Pass service call number to  A
00F019  1  A2 0F                        ldx #$0f                ; Start at ROM 15
00F01B  1                                                       ; Issue service call loop
00F01B  1  FE 3A 02     NEXT:           inc ROM_TABLE,X         ; Read bit 7 on ROM type table (no ROM has type 254 &FE)
00F01E  1  DE 3A 02                     dec ROM_TABLE,X         ;
00F021  1  10 0D                        bpl SKIP                ; If not set (+ve result), step to next ROM down
00F023  1  86 F4                        stx ROM_SELECT          ; Otherwise, select this ROM, &F4 RAM copy
00F025  1  8E 30 FE                     stx ROM_LATCH           ; Page in selected ROM
00F028  1  20 03 80                     jsr SERVICE_ENTRY       ; Call the ROM's service entry
00F02B  1                                                       ; X and P do not need to be preserved by the ROM
00F02B  1  AA                           tax                     ; On exit pass A to X to chech if claimed
00F02C  1  F0 05                        beq CLAIMED             ; If 0, service call claimed, reselect ROM and exit
00F02E  1  A6 F4                        ldx ROM_SELECT          ; Otherwise, get current ROM back
00F030  1  CA           SKIP:           dex                     ; Step to next ROM down
00F031  1  10 E8                        bpl NEXT                ; Loop until done ROM 0
00F033  1               
00F033  1  68           CLAIMED:        pla                     ; Get back original ROM number
00F034  1  85 F4                        sta ROM_SELECT          ; Set ROM number RAM copy
00F036  1  8D 30 FE                     sta ROM_LATCH           ; Page in the original ROM
00F039  1  8A                           txa                     ; Pass X back to A to set zero flag
00F03A  1  60                           rts                     ; And return
00F03B  1               
00F03B  1               .INCLUDE        "gsinitgsread.s"
00F03B  2               ;*************************************************************************
00F03B  2               ;*	 GSINIT	 string initialisation					 *
00F03B  2               ;*	 F2/3 points to string offset by Y				 *
00F03B  2               ;*									 *
00F03B  2               ;*	 ON EXIT							 *
00F03B  2               ;*	 Z flag set indicates null string,				 *
00F03B  2               ;*	 Y points to first non blank character				 *
00F03B  2               ;*	 A contains first non blank character				 *
00F03B  2               ;*************************************************************************
00F03B  2               
00F03B  2               
00F03B  2               .exportzp OSBYTE_PAR_3		:= $e4
00F03B  2               .exportzp OSBYTE_PAR_2		:= $e5
00F03B  2               .exportzp TEXT_PTR		:= $f2
00F03B  2               
00F03B  2  66 E4        _GSINIT:		ror	OSBYTE_PAR_3			; Rotate moves carry to &E4
00F03D  2  20 4D F0     			jsr	_SKIP_SPACE			; get character from text
00F040  2  C8           			iny					; increment Y to point at next character
00F041  2  C9 22        			cmp	#$22				; check to see if its '"'
00F043  2  F0 02        			beq	_BEA2A				; if so EA2A (carry set)
00F045  2  88           			dey					; decrement Y
00F046  2  18           			clc					; clear carry
00F047  2  66 E4        _BEA2A:			ror	OSBYTE_PAR_3			; move bit 7 to bit 6 and put carry in bit 7
00F049  2  C9 0D        			cmp	#$0d				; check to see if its CR to set Z
00F04B  2  60           			rts					; and return
00F04C  2               
00F04C  2               ; Skip spaces
00F04C  2  C8           _SKIP_SPACES_NXT:	iny
00F04D  2  B1 F2        _SKIP_SPACE:		lda	(TEXT_PTR),Y
00F04F  2  C9 20        			cmp	#$20
00F051  2  F0 F9        			beq	_SKIP_SPACES_NXT
00F053  2  C9 0D        __compare_newline:	cmp	#$0d
00F055  2  60           			rts
00F056  2               
00F056  2               ;*************************************************************************
00F056  2               ;*	 GSREAD	 string read routine					 *
00F056  2               ;*	 F2/3 points to string offset by Y				 *
00F056  2               ;*									 *
00F056  2               ;*************************************************************************
00F056  2  FF           _BD9B7:			.byte	$ff				; USER 6522 Bit IRQ mask		 &277
00F057  2               				;
00F057  2  A9 00        _GSREAD:		lda	#$00				; A=0
00F059  2  85 E5        _BEA31:			sta	OSBYTE_PAR_2			; store A
00F05B  2  B1 F2        			lda	(TEXT_PTR),Y			; read first character
00F05D  2  C9 0D        			cmp	#$0d				; is it CR
00F05F  2  D0 06        			bne	_BEA3F				; if not goto EA3F
00F061  2  24 E4        			bit	OSBYTE_PAR_3			; if bit 7=1 no 2nd '"' found
00F063  2  30 52        			bmi	_LEA8F				; goto EA8F
00F065  2  10 1B        			bpl	_BEA5A				; if not EA5A
00F067  2               
00F067  2  C9 20        _BEA3F:			cmp	#$20				; is less than a space?
00F069  2  90 4C        			bcc	_LEA8F				; goto EA8F
00F06B  2  D0 06        			bne	_BEA4B				; if its not a space EA4B
00F06D  2  24 E4        			bit	OSBYTE_PAR_3			; is bit 7 of &E4 =1
00F06F  2  30 40        			bmi	_BEA89				; if so goto EA89
00F071  2  50 0F        			bvc	_BEA5A				; if bit 6 = 0 EA5A
00F073  2  C9 22        _BEA4B:			cmp	#$22				; is it '"'
00F075  2  D0 10        			bne	_BEA5F				; if not EA5F
00F077  2  24 E4        			bit	OSBYTE_PAR_3			; if so and Bit 7 of &E4 =0 (no previous ")
00F079  2  10 36        			bpl	_BEA89				; then EA89
00F07B  2  C8           			iny					; else point at next character
00F07C  2  B1 F2        			lda	(TEXT_PTR),Y			; get it
00F07E  2  C9 22        			cmp	#$22				; is it '"'
00F080  2  F0 2F        			beq	_BEA89				; if so then EA89
00F082  2               
00F082  2  20 4D F0     _BEA5A:			jsr	_SKIP_SPACE			; read a byte from text
00F085  2  38           			sec					; and return with
00F086  2  60           			rts					; carry set
00F087  2               								;
00F087  2  C9 7C        _BEA5F:			cmp	#$7c				; is it '|'
00F089  2  D0 26        			bne	_BEA89				; if not EA89
00F08B  2  C8           			iny					; if so increase Y to point to next character
00F08C  2  B1 F2        			lda	(TEXT_PTR),Y			; get it
00F08E  2  C9 7C        			cmp	#$7c				; and compare it with '|' again
00F090  2  F0 1F        			beq	_BEA89				; if its '|' then EA89
00F092  2  C9 22        			cmp	#$22				; else is it '"'
00F094  2  F0 1B        			beq	_BEA89				; if so then EA89
00F096  2  C9 21        			cmp	#$21				; is it !
00F098  2  D0 05        			bne	_BEA77				; if not then EA77
00F09A  2  C8           			iny					; increment Y again
00F09B  2  A9 80        			lda	#$80				; set bit 7
00F09D  2  D0 BA        			bne	_BEA31				; loop back to EA31 to set bit 7 in next CHR
00F09F  2  C9 20        _BEA77:			cmp	#$20				; is it a space
00F0A1  2  90 14        			bcc	_LEA8F				; if less than EA8F Bad String Error
00F0A3  2  C9 3F        			cmp	#$3f				; is it '?'
00F0A5  2  F0 08        			beq	_BEA87				; if so EA87
00F0A7  2  20 E7 F0     			jsr	_LEABF				; else modify code as if CTRL had been pressed
00F0AA  2  2C 56 F0     			bit	_BD9B7				; if bit 6 set
00F0AD  2  70 03        			bvs	_BEA8A				; then EA8A
00F0AF  2  A9 7F        _BEA87:			lda	#$7f				; else set bits 0 to 6 in A
00F0B1  2               
00F0B1  2  B8           _BEA89:			clv					; clear V
00F0B2  2  C8           _BEA8A:			iny					; increment Y
00F0B3  2  05 E5        			ora	OSBYTE_PAR_2			;
00F0B5  2  18           			clc					; clear carry
00F0B6  2  60           			rts					; Return
00F0B7  2               								;
00F0B7  2  00           _LEA8F:			brk					;
00F0B8  2  FD           			.byte	$fd				; error number
00F0B9  2  42 61 64 20  			.byte	"Bad string"			; message
00F0BD  2  73 74 72 69  
00F0C1  2  6E 67        
00F0C3  2  00           			brk					;
00F0C4  2               
00F0C4  2               
00F0C4  2               ;************ Modify code as if SHIFT pressed *****************************
00F0C4  2               
00F0C4  2  C9 30        _LEA9C:			cmp	#$30				; if A='0' skip routine
00F0C6  2  F0 1E        			beq	_BEABE				;
00F0C8  2  C9 40        			cmp	#$40				; if A='@' skip routine
00F0CA  2  F0 1A        			beq	_BEABE				;
00F0CC  2  90 12        			bcc	_BEAB8				; if A<'@' then EAB8
00F0CE  2  C9 7F        			cmp	#$7f				; else is it DELETE
00F0D0  2               
00F0D0  2  F0 14        			beq	_BEABE				; if so skip routine
00F0D2  2  B0 10        			bcs	_BEABC				; if greater than &7F then toggle bit 4
00F0D4  2  49 30        _BEAAC:			eor	#$30				; reverse bits 4 and 5
00F0D6  2  C9 6F        			cmp	#$6f				; is it &6F (previously ' _' (&5F))
00F0D8  2  F0 04        			beq	_BEAB6				; goto EAB6
00F0DA  2  C9 50        			cmp	#$50				; is it &50 (previously '`' (&60))
00F0DC  2  D0 02        			bne	_BEAB8				; if not EAB8
00F0DE  2  49 1F        _BEAB6:			eor	#$1f				; else continue to convert ` _
00F0E0  2  C9 21        _BEAB8:			cmp	#$21				; compare &21 '!'
00F0E2  2  90 02        			bcc	_BEABE				; if less than return
00F0E4  2  49 10        _BEABC:			eor	#$10				; else finish conversion by toggling bit 4
00F0E6  2  60           _BEABE:			rts					; exit
00F0E7  2               								;
00F0E7  2               								; ASCII codes &00 &20 no change
00F0E7  2               								; 21-3F have bit 4 reverses (31-3F)
00F0E7  2               								; 41-5E A-Z have bit 5 reversed a-z
00F0E7  2               								; 5F & 60 are reversed
00F0E7  2               								; 61-7E bit 5 reversed a-z becomes A-Z
00F0E7  2               								; DELETE unchanged
00F0E7  2               								; &80+ has bit 4 changed
00F0E7  2               
00F0E7  2               ;************** Implement CTRL codes *************************************
00F0E7  2               
00F0E7  2  C9 7F        _LEABF:			cmp	#$7f				; is it DEL
00F0E9  2  F0 0E        			beq	_BEAD1				; if so ignore routine
00F0EB  2  B0 E7        			bcs	_BEAAC				; if greater than &7F go to EAAC
00F0ED  2  C9 60        			cmp	#$60				; if A<>'`'
00F0EF  2  D0 02        			bne	_BEACB				; goto EACB
00F0F1  2  A9 5F        			lda	#$5f				; if A=&60, A=&5F
00F0F3  2               
00F0F3  2  C9 40        _BEACB:			cmp	#$40				; if A<&40
00F0F5  2  90 02        			bcc	_BEAD1				; goto EAD1  and return unchanged
00F0F7  2  29 1F        			and	#$1f				; else zero bits 5 to 7
00F0F9  2  60           _BEAD1:			rts					; return
00F0FA  2               
00F0FA  1               
00F0FA  1               
00F0FA  1               ; area to store an error message
00F0FA  1  xx xx xx xx                  .res $fa00 - *
00F0FE  1  xx xx xx xx  
00F102  1  xx xx xx xx  
00FA00  1                               .org $fa00
00FA00  1  00           errorArea:      brk
00FA01  1  00           errorCode:      .byte 0
00FA02  1  48 65 6C 6C  errorMessage:   .asciiz "Hello world"
00FA06  1  6F 20 77 6F  
00FA0A  1  72 6C 64 00  
00FA0E  1               
00FA0E  1               ; bbz host entry points
00FA0E  1  xx xx xx xx                  .res $fb00 - *
00FA12  1  xx xx xx xx  
00FA16  1  xx xx xx xx  
00FB00  1                               .org $fb00
00FB00  1  60           epUPT:          rts                     ; 0xfb00
00FB01  1  60           epEVNT:         rts                     ; 0xfb01
00FB02  1  60           epFSC:          rts                     ; 0xfb02
00FB03  1  60           epFIND:         rts                     ; 0xfb03
00FB04  1  60           epGBPB:         rts                     ; 0xfb04
00FB05  1  60           epBPUT:         rts                     ; 0xfb05
00FB06  1  60           epBGET:         rts                     ; 0xfb06
00FB07  1  60           epARGS:         rts                     ; 0xfb07
00FB08  1  60           epFILE:         rts                     ; 0xfb08
00FB09  1  60           epRDCH:         rts                     ; 0xfb09
00FB0A  1  60           epWRCH:         rts                     ; 0xfb0a
00FB0B  1  60           epWORD:         rts                     ; 0xfb0b
00FB0C  1  60           epBYTE:         rts                     ; 0xfb0c
00FB0D  1  60           epCLI:          rts                     ; 0xfb0d
00FB0E  1  60           epIRQ2:         rts                     ; 0xfb0e
00FB0F  1  60           epIRQ1:         rts                     ; 0xfb0f
00FB10  1  60           epBRK:          rts                     ; 0xfb10
00FB11  1  60           epUSER:         rts                     ; 0xfb11
00FB12  1  60           epSYSBRK:       rts                     ; 0xfb12
00FB13  1  60           epRDRM:         rts                     ; 0xfb13
00FB14  1  60           epVDUCH:        rts                     ; 0xfb14
00FB15  1  60           epGSINIT:       rts                     ; 0xfb15
00FB16  1  60           epGSREAD:       rts                     ; 0xfb16
00FB17  1  60           epNET:          rts                     ; 0xfb17
00FB18  1  60           epVDU:          rts                     ; 0xfb18
00FB19  1  60           epKEY:          rts                     ; 0xfb19
00FB1A  1  60           epINS:          rts                     ; 0xfb1a
00FB1B  1  60           epREM:          rts                     ; 0xfb1b
00FB1C  1  60           epCNP:          rts                     ; 0xfb1c
00FB1D  1  60           epIND1:         rts                     ; 0xfb1d
00FB1E  1  60           epIND2:         rts                     ; 0xfb1e
00FB1F  1  60           epIND3:         rts                     ; 0xfb1f
00FB20  1               
00FB20  1               
00FB20  1               ; MOS function calls
00FB20  1  xx xx xx xx                  .res $ffb9 - *
00FB24  1  xx xx xx xx  
00FB28  1  xx xx xx xx  
00FFB9  1                               .org $ffb9
00FFB9  1  4C 13 FB     OSRDRM:         jmp epRDRM              ; OSRDRM get a byte from sideways ROM
00FFBC  1  4C 14 FB     VDUCHR:         jmp epVDUCH             ; VDUCHR VDU character output
00FFBF  1  4C 01 FB     OSEVEN:         jmp epEVNT              ; OSEVEN generate an EVENT
00FFC2  1  4C 15 FB     GSINIT:         jmp epGSINIT            ; GSINIT initialise OS string
00FFC5  1  4C 16 FB     GSREAD:         jmp epGSREAD            ; GSREAD read character from input stream
00FFC8  1  4C 09 FB     NVRDCH:         jmp epRDCH              ; NVRDCH non vectored OSRDCH
00FFCB  1  4C 0A FB     NVWRCH:         jmp epWRCH              ; NVWRCH non vectored OSWRCH
00FFCE  1  6C 1C 02     OSFIND:         jmp (FINDV)             ; OSFIND open or close a file
00FFD1  1  6C 1A 02     OSGBGP:         jmp (GBPBV)             ; OSGBPB transfer block to or from a file
00FFD4  1  6C 18 02     OSBPUT:         jmp (BPUTV)             ; OSBPUT save a byte to file
00FFD7  1  6C 16 02     OSBGET:         jmp (BGETV)             ; OSBGET get a byte from file
00FFDA  1  6C 14 02     OSARGS:         jmp (ARGSV)             ; OSARGS read or write file arguments
00FFDD  1  6C 12 02     OSFILE:         jmp (FILEV)             ; OSFILE read or write a file
00FFE0  1  6C 10 02     OSRDCH:         jmp (RDCHV)             ; OSRDCH get a byte from current input stream
00FFE3  1  C9 0D        OSASCI:         cmp #$0d                ; OSASCI output a byte to VDU stream expanding
00FFE5  1  D0 07                        bne OSWRCH              ; carriage returns (&0D) to LF/CR (&0A,&0D)
00FFE7  1  A9 0A        OSNEWL:         lda #$0a                ; OSNEWL output a CR/LF to VDU stream
00FFE9  1  20 EE FF                     jsr OSWRCH              ; Outputs A followed by CR to VDU stream
00FFEC  1  A9 0D                        lda #$0d                ; OSWRCR output a CR to VDU stream
00FFEE  1  6C 0E 02     OSWRCH:         jmp (WRCHV)             ; OSWRCH output a character to the VDU stream
00FFF1  1  6C 0C 02     OSWORD:         jmp (WORDV)             ; OSWORD perform operation using parameter table
00FFF4  1  6C 0A 02     OSBYTE:         jmp (BYTEV)             ; OSBYTE perform operation with single bytes
00FFF7  1  6C 08 02     OSCLI:          jmp (CLIV)              ; OSCLI pass string to command line interpreter
00FFFA  1               
00FFFA  1               
00FFFA  1               ; 6502 vectors
00FFFA  1  00 00                        .addr $0000             ; NMI address
00FFFC  1  00 80                        .addr LANGUAGE_ENTRY    ; RESET address
00FFFE  1  12 FB                        .addr epSYSBRK          ; IRQ address
00FFFE  1               
